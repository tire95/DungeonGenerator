plugins {
    // Apply the java plugin to add support for Java
    id 'java'

    // Apply the application plugin to add support for building an application
    id 'application'

    id 'jacoco'
    
    id 'checkstyle'
    
    id 'org.openjfx.javafxplugin' version '0.0.8'
    
}

sourceCompatibility = '1.11'
sourceCompatibility = '1.8'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'



// NetBeans will automatically add "run" and "debug" tasks relying on the
// "mainClass" property. You may however define the property prior executing
// tasks by passing a "-PmainClass=<QUALIFIED_CLASS_NAME>" argument.
//
// Note however, that you may define your own "run" and "debug" task if you
// prefer. In this case NetBeans will not add these tasks but you may rely on
// your own implementation.
application {
    // Define the main class for the application
    mainClassName = 'main.Main'
}
if (!hasProperty('mainClass')) {
    ext.mainClass = 'main.Main'
}

javafx {
    version = "11.0.2"
    modules = ['javafx.controls']
}

repositories {
    mavenCentral()
    // You may define additional repositories, or even remove "mavenCentral()".
    // Read more about repositories here:
    //   http://www.gradle.org/docs/current/userguide/dependency_management.html#sec:repositories
    jcenter()
}

dependencies {
    // TODO: Add dependencies here ...
    // You can read more about how to add dependency here:
    //   http://www.gradle.org/docs/current/userguide/dependency_management.html#sec:how_to_declare_your_dependencies
    
    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
    afterEvaluate {
        getClassDirectories().setFrom(classDirectories.files.collect {
                fileTree(dir: it,
                    exclude: ['**/ui/**', '**/tests/**', '**/main/**'])
        })
    }
}


run {
    standardInput = System.in
    standardOutput = System.out
}

check.dependsOn jacocoTestReport

jar {
    manifest {
        attributes "Main-Class": "main.Main"
    }

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}